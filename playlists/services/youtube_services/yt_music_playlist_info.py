import os
from googleapiclient.discovery import build
from pprint import pprint
from playlists.models import Artist, Track, Playlist
import isodate
from datetime import datetime
import re


YOUTUBE_API_KEY = os.getenv('YOUTUBE_API_KEY')
youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)


class youtube_playlist_info(object):
    def __init__(self, id):
        self.id = id
        self.data = self.get_playlist_info()

    def get_paging(self, token):
        """Recursively fetches full track details from a paginated playlist endpoint."""
        response = youtube.playlistItems().list(
            part="snippet,contentDetails",
            playlistId=f'{self.id}',
            maxResults=50,
            pageToken=token
        ).execute()
        playlist_details = response
        track_ids = []

        # pprint(playlist_details)
        # Function to extract track data
        def extract_track_data(track):
            if 'videoOwnerChannelId' in track['snippet']:
                video_id = track['contentDetails']['videoId']
                artist_channel_id = track['snippet']['videoOwnerChannelId']
                # Get data from video in playlist
                youtube_video = youtube.videos().list(
                    part="contentDetails, snippet",
                    id=f'{video_id}'
                ).execute()

                # assign
                video_duration = youtube_video['items'][0]['contentDetails']['duration']
                duration = isodate.parse_duration(video_duration)
                video_duration = int(duration.total_seconds() * 1000)
                video_description = youtube_video['items'][0]['snippet']['description']
                desc_lines = video_description.split('\n')

                # check if description matches common format
                desc_auto_generated = (
                        desc_lines[0].startswith('Provided to YouTube by')
                        and desc_lines[len(desc_lines) - 1].startswith('Auto-generated by YouTube.')
                )

                # check if release date is in description
                date_in_desc = re.search(r'\d{4}-\d{2}-\d{2}', video_description)

                # assign release date to track
                if date_in_desc and desc_auto_generated:
                    video_release = datetime.strptime(date_in_desc.group(), '%Y-%m-%d').date()
                else:
                    video_release = None

                # assign album and artist name if track description is auto generated
                if desc_auto_generated:
                    # video_release = datetime.strptime(youtube_video['items'][0]['snippet']['publishedAt'], "%Y-%m-%dT%H:%M:%SZ").strftime("%Y-%m-%d")            if is_auto_generated:
                    album_title = desc_lines[4].strip()  # album title is in 5th line of description
                    # remove - TOPIC from channel name if it is there.
                    artist_name = track['snippet']['videoOwnerChannelTitle'].replace(" - Topic", "")
                else:
                    album_title = None
                    artist_name = 'YT_UNOFFICAL_OR_UNKNOWN_ARTIST'

                album_art_url = (
                    youtube_video['items'][0]['snippet']['thumbnails']['maxres']['url']
                    if 'maxres' in youtube_video['items'][0]['snippet']['thumbnails']
                    else youtube_video['items'][0]['snippet']['thumbnails']['default']['url']
                )
                track_data = {
                    'track_name': track['snippet']['title'],
                    'track_id': video_id,
                    'duration_ms': video_duration,
                    'explicit': None,
                    'youtube_track_uri': track['contentDetails']['videoId'],
                    'youtube_album_uri': None,
                    'track_number': None,  # track['snippet']['position'],
                    'artist': {
                        "artist_name": artist_name,
                        "artist_youtube_uri": artist_channel_id if desc_auto_generated else None,
                        'offical': desc_auto_generated
                    },
                    'album_art': album_art_url,
                    'album_name': album_title,
                    'release_date': video_release,
                    'offical_track': desc_auto_generated
                }
                return track_data
            else:
                return False

        # Extract track data for each track in the playlist
        tracks = playlist_details['items']
        for item in tracks:
            track = item
            if track and extract_track_data(track):  # Ensure the track details are present
                track_ids.append(extract_track_data(track))

        # Handle pagination if there are more tracks to fetch
        next_page = playlist_details['nextPageToken'] if 'nextPageToken' in playlist_details else None
        if next_page:
            track_ids.extend(self.get_paging(next_page))
        # pprint(track_ids)
        return track_ids

    def get_playlist_info(self):
        response = youtube.playlists().list(
            part="snippet,contentDetails",
            id=f'{self.id}'
        ).execute()
        playlist_details = response["items"][0]
        playlist_data = {'youtube_playlist_uri': playlist_details['id'],
                         'creator_name': playlist_details['snippet']['channelTitle'],
                         'playlist_name': playlist_details['snippet']['title'],
                         'playlist_description': playlist_details['snippet']['description'],
                         'playlist_image': playlist_details['snippet']['thumbnails']['default']['url'] if 'default' in
                                                                                                          playlist_details[
                                                                                                              'snippet'][
                                                                                                              'thumbnails'] else
                         playlist_details['snippet']['thumbnails']['maxres']['url'],
                         'total_tracks': playlist_details['contentDetails']['itemCount'],
                         'playlist_tracks': self.get_paging('')}
        return playlist_data

    def insert_playlist_db(self):
        playlist_data = self.data
        UNOFFICAL_ARTIST_STRING = 'DO_NOT_REFERENCE'
        existing_playlist = Playlist.objects.filter(youtube_playlist_uri=self.data['youtube_playlist_uri']).first()
        if existing_playlist:
            print(f"Playlist with Youtube ID {self.data['youtube_playlist_uri']} already exists.")
            # Optionally update existing_playlist here
            return existing_playlist.playlist_id

        # Continue with adding new playlist, tracks, and albums
        playlist_tracks = []
        for item in playlist_data['playlist_tracks']:
            offical_artist = item['artist']['offical']
            artist, _ = Artist.objects.get_or_create(
                artist_name=item['artist']['artist_name'],
                defaults={
                    'youtube_music_channel_uri': item['artist'][
                        'artist_youtube_uri'] if offical_artist else UNOFFICAL_ARTIST_STRING,
                    'spotify_artist_uri': UNOFFICAL_ARTIST_STRING if not offical_artist else None,
                    'apple_music_artist_uri': UNOFFICAL_ARTIST_STRING if not offical_artist else None
                }
            )
            if offical_artist:
                if artist.youtube_music_channel_uri is None or artist.youtube_music_channel_uri is '':
                    artist.youtube_music_channel_uri = item['artist']['artist_youtube_uri'] if item['artist'][
                        'artist_youtube_uri'] else None
                    artist.save()

            track, _ = Track.objects.get_or_create(
                track_id=item['track_id'],
                defaults={
                    'track_name': item['track_name'],
                    'duration_ms': item['duration_ms'],
                    'explicit': item['explicit'],
                    'track_number': item['track_number'],
                    'youtube_music_track_uri': item['youtube_track_uri'],
                    'album_art_url': item['album_art'],
                    'album_title': item['album_name'],
                    'release_date': item['release_date'],
                    'original_platform': 'yt_music',
                    'offical_track': item['offical_track']
                }
            )
            track.artists.add(artist)

            playlist_tracks.append(track)

        playlist, _ = Playlist.objects.get_or_create(
            youtube_playlist_uri=playlist_data['youtube_playlist_uri'],
            defaults={
                'playlist_name': playlist_data['playlist_name'],
                'playlist_description': playlist_data['playlist_description'],
                'playlist_track_length': len(playlist_tracks),  # Updated from 'total_tracks',
                'playlist_image': playlist_data['playlist_image']
            }
        )

        for track in playlist_tracks:
            playlist.tracks.add(track)

        print(f"Successfully added/updated playlist: {playlist.playlist_name}")
        return playlist.playlist_id
